name: Test Hish Indexer

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'rag/indexer/**'
      - 'scripts/host-indexer.py'
      - 'mcp/Dockerfile.llamaindex'
      - 'deploy/compose.rag.yml'
      - 'config/env.*'
      - 'Makefile'
      - '.github/workflows/test-indexer.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'rag/indexer/**'
      - 'scripts/host-indexer.py'
      - 'mcp/Dockerfile.llamaindex'
      - 'deploy/compose.rag.yml'
      - 'config/env.*'
      - 'Makefile'
      - '.github/workflows/test-indexer.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('rag/indexer/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      working-directory: rag/indexer
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install development dependencies
      run: |
        pip install -r requirements-dev.txt

    - name: Verify MPNet model availability
      working-directory: rag/indexer
      run: |
        python -c "
        from fastembed import TextEmbedding
        models = TextEmbedding.list_supported_models()
        mpnet_available = any('paraphrase-multilingual-mpnet-base-v2' in m['model'] for m in models)
        print(f'MPNet model available: {mpnet_available}')
        assert mpnet_available, 'MPNet model not available in FastEmbed'
        "

    - name: Run tests
      working-directory: rag/indexer
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Test host indexer script
      run: |
        python scripts/host-indexer.py --help

    - name: Test Makefile targets
      run: |
        make help
        echo "✅ Makefile help works"

    - name: Validate configuration files
      run: |
        # Test that environment files can be loaded
        python -c "
        import os
        from pathlib import Path

        config_dir = Path('config')
        env_files = list(config_dir.glob('env.*'))
        print(f'Found {len(env_files)} environment files')

        for env_file in env_files:
            print(f'Validating {env_file}...')
            with open(env_file) as f:
                lines = f.readlines()

            # Basic validation
            for line_num, line in enumerate(lines, 1):
                line = line.strip()
                if line and not line.startswith('#'):
                    if '=' not in line:
                        raise ValueError(f'{env_file}:{line_num} - Invalid line: {line}')

            print(f'✅ {env_file} is valid')
        "

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./rag/indexer/coverage.xml
        flags: indexer
        name: indexer-coverage
        fail_ci_if_error: false

  test-mcp-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test MCP Dockerfile syntax
      run: |
        # Simple Dockerfile validation
        python -c "
        with open('mcp/Dockerfile.llamaindex', 'r') as f:
            content = f.read()

        # Basic validation - just check required instructions exist
        if 'FROM ' not in content:
            raise ValueError('Missing FROM instruction')
        if 'CMD ' not in content and 'ENTRYPOINT ' not in content:
            raise ValueError('Missing CMD or ENTRYPOINT instruction')

        print('✅ MCP Dockerfile syntax is valid')
        "

    - name: Test Docker Compose configuration
      run: |
        docker compose -f deploy/compose.rag.yml config --quiet
        echo "✅ Docker Compose configuration is valid"

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run ruff (linting)
      working-directory: rag/indexer
      run: |
        ruff check . --output-format=github

    - name: Run black (formatting check)
      working-directory: rag/indexer
      run: |
        black --check --diff .

    - name: Run isort (import sorting check)
      working-directory: rag/indexer
      run: |
        isort --check-only --diff .

    - name: Run mypy (type checking)
      working-directory: rag/indexer
      run: |
        mypy . --ignore-missing-imports || echo "⚠️ Type checking found issues (non-blocking)"
